language: php

services:
  - docker

sudo: false

cache:
  directories:
    - $HOME/.composer/cache
    - $HOME/.phive
    - $HOME/.gnupg

matrix:
  fast_finish: true
  include:
    - php: 7.3
      env: RUN_TEST=true  ES_VERSION=73
    - php: 7.4
      env: RUN_TEST=true  ES_VERSION=73
    # Testing the library with different ES versions
    - php: 7.2
      env: RUN_TEST=true ES_VERSION=72
    - php: 7.2
      env: RUN_TEST=true ES_VERSION=71
    # Running code-coverage on the lowest requirements for PHP 7.2
    - php: 7.2
      env: RUN_TEST=coverage COMPOSER_FLAGS="--prefer-stable --prefer-lowest" ES_VERSION=73
    # Run coding-style checks on the lowest version of PHP
    - php: 7.2
      env: RUN_CS=true

before_install:
  - if [[ "$RUN_TEST" != "coverage" ]]; then phpenv config-rm xdebug.ini || true; fi

install:
  - travis_retry make composer-update # This will make sure all the dependencies are installed with the correct COMPOSER_FLAGS

before_script:
  # vm.max_map_count=262144 is needed by ES to properly spin up the nodes, otherwise the ES bootstrap checks will fail
  - sudo sysctl -w vm.max_map_count=262144
  - docker --version
  - docker-compose --version

script:
  - if [[ "$RUN_CS" = "true" ]]; then make run-phpcs; fi
  - if [[ "$ES_VERSION" != "" ]]; then docker-compose --file=docker/docker-compose.proxy.yml --file=docker/docker-compose.es.yml --file=docker/docker-compose.es$ES_VERSION.yml up --detach; fi
  - if [[ "$RUN_TEST" != "" ]]; then make install-tools; fi
  # Waiting for ES to be up and running, and all nodes to be in sync
  - if [[ "$RUN_TEST" != "" ]]; then echo "Waiting for ES to be up and running"; sleep 7; timeout 3m bash -c 'until curl -XGET http://127.0.0.1:9200; do sleep 7; done'; fi
  - if [[ "$RUN_TEST" = "true" ]]; then make run-phpunit; fi
  - if [[ "$RUN_TEST" = "coverage" ]]; then make run-phpunit-coverage; fi

after_success:
  - if [[ "$RUN_TEST" = "coverage" ]]; then travis_retry make run-coveralls; fi
